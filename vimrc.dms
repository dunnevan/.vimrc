set nocompatible
set encoding=utf-8

" let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
" let $NVIM_PYTHON_LOG_LEVEL="DEBUG"

" let g:python3_host_prog = '/home/evan/.pyenv/versions/nvim/bin/python3'

"" configuration
set mouse=a
" no modelines
set nomodeline
" relative numbers
set number
set relativenumber
" spaces
set tabstop=4
set shiftwidth=4
set expandtab
" required for operations modifying multiple buffers like rename.
set hidden
" don't give |ins-completion-menu| messages.
set shortmess+=c
set signcolumn=yes
set cmdheight=2

" buffer ls and change
nnoremap <Leader>b :ls<CR>:b<Space>

" system clipboard
" set clipboard=unnamed
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p
" esc to exit terminal mode
tnoremap <Esc> <C-\><C-n>\|<C-W><C-P>
tnoremap <leader><Esc> <C-\><C-n>
" intuitive vim pane navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"" auto install plug.vim
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"" plugins
call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

" snippets
Plug 'kentaroi/ultisnips-swift'
Plug 'honza/vim-snippets'

" syntax highlight
Plug 'jph00/swift-apple'
"not maintained elm 0.19 Plug 'elmcast/elm-vim'
Plug 'Zaptic/elm-vim'
.
" color schemes
Plug 'morhetz/gruvbox'
Plug 'drewtempelmeyer/palenight.vim'

Plug 'Vigemus/iron.nvim'

Plug 'lambdalisue/vim-pyenv'

call plug#end()

"" LanguageClient-neovim config

"" tab completion config
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    
"" coc.nvim config
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? coc#rpc#request('doKeymap', ['snippets-expand-jump','']) :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implmentation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if &filetype == 'vim'
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

"Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

"Use `:Fold` for fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"" BufEnter terminal
autocmd BufWinEnter,WinEnter term://* startinsert

"" color themee config
if (has("termguicolors"))
    set termguicolors
endif

if has('nvim')
    " nvim specific things
    exec 'lua require("iron").core.set_config{repl_open_cmd = "vsplit"}'
    " swift repl
    exec 'lua require("iron").core.add_repl_definitions{swift = {swift = {command = {"swift"}}}}'
    " elm repl
    exec 'lua require("iron").core.add_repl_definitions{elm = {elm = {command ={"elm repl"}}}}'
endif

let g:palenight_terminal_italics=1
let g:gruvbox_italic=1
let g:gruvbox_italicize_strings=1
colorscheme gruvbox
set background=dark
